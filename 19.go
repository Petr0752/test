package main

import (
	"fmt"
	"unicode/utf8"
)

func reverseString(s string) string {
	// Создаем пустую строку для хранения результата
	var reversed string

	// Перебираем строку с конца в начало
	for len(s) > 0 {
		// Получаем последний символ и его размер в байтах
		r, size := utf8.DecodeLastRuneInString(s)
		// Добавляем его в начало результата
		reversed += string(r)
		// Обрезаем последний символ из оригинальной строки
		s = s[:len(s)-size]
	}

	return reversed
}

func main() {
	original := "главрыба — абырвалг"
	reversed := reverseString(original)
	fmt.Println(reversed) // "главрыба — абырвалг" -> "главр ыба—абырвалг"
}

// Создание функции reverseString с аргументом s типа string и возвращаемым значением типа string.
// Преобразование строки s в массив рун (тип []rune), чтобы обработать юникод-символы. Для этого используется функция []rune(s).
// Определение длины строки n, которая равна количеству рун в массиве.
// Создание нового массива result типа []rune длиной n, в который будут записываться руны в обратном порядке.
// Запуск цикла от 0 до n минус 1, который будет перебирать индексы массива в обратном порядке.
// Запись в элемент i массива result руны, расположенной на индексе n минус 1 минус i в массиве s.
// Возвращение результата перевернутой строки в виде string(result).
// В функции main вызывается функция reverseString с передачей строки в качестве аргумента,
// И результат выводится в стандартный вывод при помощи функции fmt.Println.
